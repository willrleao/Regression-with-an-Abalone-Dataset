{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":72489,"databundleVersionId":8096274,"sourceType":"competition"},{"sourceId":8040597,"sourceType":"datasetVersion","datasetId":4740472},{"sourceId":8040635,"sourceType":"datasetVersion","datasetId":4740493}],"dockerImageVersionId":30674,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-18T20:04:43.636515Z","iopub.execute_input":"2024-04-18T20:04:43.637614Z","iopub.status.idle":"2024-04-18T20:04:43.650953Z","shell.execute_reply.started":"2024-04-18T20:04:43.637542Z","shell.execute_reply":"2024-04-18T20:04:43.649970Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"/kaggle/input/dados-externos/abalone.names\n/kaggle/input/dados-externos/Index\n/kaggle/input/dados-externos/abalone.data\n/kaggle/input/abalone-dados-externos/names.csv\n/kaggle/input/abalone-dados-externos/Index.txt\n/kaggle/input/abalone-dados-externos/abalone-data.csv\n/kaggle/input/abalone-dados-externos/abalone-names.txt\n/kaggle/input/playground-series-s4e4/sample_submission.csv\n/kaggle/input/playground-series-s4e4/train.csv\n/kaggle/input/playground-series-s4e4/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s4e4/train.csv')\ntest = pd.read_csv('/kaggle/input/playground-series-s4e4/test.csv')\nsubmission = pd.read_csv('/kaggle/input/playground-series-s4e4/sample_submission.csv')\nabalone_data = pd.read_csv('/kaggle/input/dados-externos/abalone.data')","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:04:43.653403Z","iopub.execute_input":"2024-04-18T20:04:43.654255Z","iopub.status.idle":"2024-04-18T20:04:43.868352Z","shell.execute_reply.started":"2024-04-18T20:04:43.654211Z","shell.execute_reply":"2024-04-18T20:04:43.867122Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"train.columns\ntest.isnull().value_counts()\ntest['Sex'].unique\n\ntrain = pd.read_csv('/kaggle/input/playground-series-s4e4/train.csv')\ntest = pd.read_csv('/kaggle/input/playground-series-s4e4/test.csv')\nsubmission = pd.read_csv('/kaggle/input/playground-series-s4e4/sample_submission.csv')\n\nexternal_names = pd.read_csv('/kaggle/input/abalone-dados-externos/names.csv')\nexternal_data = pd.read_csv('/kaggle/input/abalone-dados-externos/abalone-data.csv')\n\nx_train = train.iloc[:,1:-1]\ny_train = train.iloc[:, -1]\ntest = test.iloc[:,1:]\nabalone_data_x = abalone_data.iloc[:,:-1]\nabalone_data_y = abalone_data.iloc[:, -1]\n\nabalone_data_x.columns = x_train.columns.copy()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:04:43.869810Z","iopub.execute_input":"2024-04-18T20:04:43.870183Z","iopub.status.idle":"2024-04-18T20:04:44.067321Z","shell.execute_reply.started":"2024-04-18T20:04:43.870150Z","shell.execute_reply":"2024-04-18T20:04:44.066294Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n# DADOS INTERNOS DO PLAYGROUND\nX_train, X_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.40, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:04:44.069542Z","iopub.execute_input":"2024-04-18T20:04:44.070099Z","iopub.status.idle":"2024-04-18T20:04:44.089052Z","shell.execute_reply.started":"2024-04-18T20:04:44.070066Z","shell.execute_reply":"2024-04-18T20:04:44.087955Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import OrdinalEncoder\nenc = OrdinalEncoder()\n\nX_train['Sex'] = enc.fit_transform(X_train[['Sex']])\nX_test['Sex'] = enc.fit_transform(X_test[['Sex']])\ntest['Sex'] = enc.fit_transform(test[['Sex']])","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:04:44.090395Z","iopub.execute_input":"2024-04-18T20:04:44.090778Z","iopub.status.idle":"2024-04-18T20:04:44.142505Z","shell.execute_reply.started":"2024-04-18T20:04:44.090739Z","shell.execute_reply":"2024-04-18T20:04:44.141016Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"import lightgbm as lgbm\n\nreg = lgbm.LGBMRegressor()\nreg.fit(X_train, y_train, eval_set=[(X_test, y_test)], eval_metric='mse')\n\ny_pred = reg.predict(X_test)\nfrom sklearn.metrics import mean_squared_log_error\nrmsle = np.sqrt(mean_squared_log_error(y_test, y_pred))\nprint(\"Root Mean Squared Logarithmic Error (RMSLE):\", rmsle)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:04:44.145100Z","iopub.execute_input":"2024-04-18T20:04:44.145657Z","iopub.status.idle":"2024-04-18T20:04:46.331771Z","shell.execute_reply.started":"2024-04-18T20:04:44.145610Z","shell.execute_reply":"2024-04-18T20:04:46.330853Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006353 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1326\n[LightGBM] [Info] Number of data points in the train set: 54369, number of used features: 8\n[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n[LightGBM] [Info] Start training from score 9.707701\nRoot Mean Squared Logarithmic Error (RMSLE): 0.15256324098994722\n","output_type":"stream"}]},{"cell_type":"code","source":"testF = reg.predict(test)\nsubmission['Rings'] = testF\nsubmission['Rings'] = submission['Rings'].astype(int)\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:04:46.333075Z","iopub.execute_input":"2024-04-18T20:04:46.333769Z","iopub.status.idle":"2024-04-18T20:04:46.726725Z","shell.execute_reply.started":"2024-04-18T20:04:46.333738Z","shell.execute_reply":"2024-04-18T20:04:46.725847Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"# viewD = pd.read_csv('submission.csv')\n# viewD.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T20:04:46.727965Z","iopub.execute_input":"2024-04-18T20:04:46.728465Z","iopub.status.idle":"2024-04-18T20:04:46.732594Z","shell.execute_reply.started":"2024-04-18T20:04:46.728437Z","shell.execute_reply":"2024-04-18T20:04:46.731484Z"},"trusted":true},"execution_count":27,"outputs":[]}]}